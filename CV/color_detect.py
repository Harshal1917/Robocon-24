import cv2
import numpy as np

# Define HSV color ranges
# Note: These ranges might need to be adjusted based on your specific colors and lighting conditions
"""
color_ranges = {
    "red": ((160, 100, 100), (179, 255, 255)),  # Example range for red
    "blue": ((100, 150, 0), (140, 255, 255)),  # Example range for blue
    "purple": ((126, 87, 161), (161, 85 , 151))  # Example range for purple
}#"""

#original
# color_ranges = {
#     "red": ((161, 49, 61), (255, 255, 255)),  # Adjusted range for red
#     "blue": ((101, 24, 0), (121, 255, 255)),  # Keeping blue the same
#     "purple": ((120, 12, 47), (165, 163, 255))  # Adjusted range for purple to not overlap with red
# }

# # Define BGR colors for drawing rectangles
# colors = {
#     "red": (76, 54, 244),  # Example for red
#     "blue": (226, 127, 48),  # Example for blue
#     "purple": (149, 90, 161)  # Example for purple
# }


#wrong
color_ranges = {
    "red": ((0, 59, 121), (57, 255, 208)),  # Adjusted range for red
    "blue": ((82, 104, 57), (125, 255, 255)),  # Keeping blue the same
    "purple": ((127, 68, 99), (160, 160, 141))  # Adjusted range for purple to not overlap with red
}
colors = {
    "red": (76, 54, 244),  # Example for red
    "blue": (226, 127, 48),  # Example for blue
    "purple": (92, 43, 99)  # Example for purple
}



# Function to classify balls based on color ranges in HSV space and visualize the classification
# def classify_and_visualize_balls(image, balls):
#     # Convert the image to HSV for better color classification
#     hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

#     classified_balls = {"red": [], "blue": [], "purple": []}

#     for box in balls:
#         x1, y1, x2, y2 = box

#         ball_img_hsv = hsv_image[y1:y2, x1:x2]

#         # Check each color range
#         for color, (lower, upper) in color_ranges.items():

#             mask = cv2.inRange(ball_img_hsv, np.array(lower), np.array(upper))
#             if cv2.countNonZero(mask) > 0:  # If any pixel matches the color range
#                 classified_balls[color].append(box)
#                 # Draw rectangle around the detected ball using the predefined BGR color
#                 cv2.rectangle(image, (x1, y1), (x2, y2), colors[color], 2)

#                 # Display the mask for the current color selection
#                 cv2.imshow(f'{color.capitalize()} Mask', mask)

#                 break  # Stop checking other colors if a match is found

#     # Display the result
#     cv2.imshow('Classified Balls', image)
#     cv2.waitKey(0)
#     cv2.destroyAllWindows()

#     for color, boxes in classified_balls.items():
#         print(f"{color.capitalize()} balls:", boxes)

#     return classified_balls



def classify_and_visualize_balls(image, balls):
    hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    classified_balls = {"red": [], "blue": [], "purple": []}

    for box in balls:
        x1, y1, x2, y2 = box
        # Calculate the center of the bounding box
        center_x, center_y = (x1 + x2) // 2, (y1 + y2) // 2

        # Define a smaller region around the center (e.g., a 10x10 square)
        region_size = 10
        region_half = region_size // 2
        region_x1, region_y1 = max(center_x - region_half, 0), max(center_y - region_half, 0)
        region_x2, region_y2 = min(center_x + region_half, image.shape[1]), min(center_y + region_half, image.shape[0])

        # Sample the smaller region
        sampled_region = hsv_image[region_y1:region_y2, region_x1:region_x2]

        # Flatten the region to a list of pixels
        pixels = sampled_region.reshape(-1, sampled_region.shape[-1])

        # Determine the most frequently occurring color in the region
        max_color = ''
        max_count = 0
        for color, (lower, upper) in color_ranges.items():
            mask = cv2.inRange(sampled_region, np.array(lower), np.array(upper))
            count = cv2.countNonZero(mask)
            if count > max_count:
                max_count = count
                max_color = color

        if max_color:
            classified_balls[max_color].append(box)
            cv2.rectangle(image, (x1, y1), (x2, y2), colors[max_color], 2)

    cv2.imshow('Classified Balls', image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

    for color, boxes in classified_balls.items():
        print(f"{color.capitalize()} balls:", boxes)

    # return classified_balls
    return {
        "red_ball": classified_balls["red"],
        "blue_ball": classified_balls["blue"],
        "purple_ball": classified_balls["purple"]
    }
    

# Array of image paths
image_paths = ["1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","7.jpg","8.jpg","9.jpg","10.jpg","11.jpg"]

balls_float = [[(168.98953247070312 , 313.2676086425781 , 226.52139282226562 , 387.0252990722656),
(128.18849182128906 , 306.70294189453125 , 179.49961853027344 , 378.0439453125),
(195.54681396484375 , 295.2579650878906 , 243.40045166015625 , 360.0823669433594),
(367.66876220703125 , 238.42300415039062 , 400.8782958984375 , 280.3059387207031),
(152.3077392578125 , 197.715576171875 , 183.88992309570312 , 238.72088623046875),
(221.2281494140625 , 200.3909454345703 , 259.702392578125 , 237.82005310058594),
(161.65957641601562 , 237.3628692626953 , 195.16281127929688 , 278.47869873046875),
(225.75631713867188 , 237.32589721679688 , 260.40777587890625 , 280.7337951660156),
(220.49935913085938 , 158.35757446289062 , 256.11981201171875 , 205.41110229492188)],[
(166.92811584472656 , 311.0231018066406 , 225.0376739501953 , 385.5102844238281),
(364.58038330078125 , 232.32095336914062 , 397.91119384765625 , 274.7552185058594),
(126.66531372070312 , 304.42987060546875 , 177.96807861328125 , 377.3907470703125),
(193.23696899414062 , 291.04449462890625 , 241.09161376953125 , 354.914794921875),
(222.348388671875 , 234.6083984375 , 256.293701171875 , 277.09930419921875),
(146.13595581054688 , 195.56753540039062 , 179.83615112304688 , 237.62948608398438),
(157.9416961669922 , 234.54623413085938 , 192.06590270996094 , 275.8736877441406),
(218.38565063476562 , 195.73890686035156 , 249.32272338867188 , 233.7842559814453),
(217.0113525390625 , 155.86953735351562 , 251.395751953125 , 199.82357788085938),
(145.89852905273438 , 194.48220825195312 , 182.57009887695312 , 279.28582763671875)],[
(137.77032470703125 , 257.1067810058594 , 246.65020751953125 , 399.4382629394531),
(169.00515747070312 , 137.47537231445312 , 269.5760803222656 , 267.1347961425781),
(238.92640686035156 , 221.88694763183594 , 339.6502685546875 , 355.7659912109375),
(345.158935546875 , 157.20394897460938 , 448.50628662109375 , 293.1811828613281),
(262.9049072265625 , 96.70567321777344 , 359.4095458984375 , 229.3090362548828),
(320.9204406738281 , 283.50531005859375 , 423.9170227050781 , 420.46942138671875)],[
(225.14065551757812 , 353.8186950683594 , 279.4885559082031 , 433.5942687988281),
(275.057373046875 , 359.189453125 , 335.6610107421875 , 442.5640869140625),
(245.22854614257812 , 317.9010009765625 , 290.0239562988281 , 357.1180419921875),
(306.95751953125 , 338.07232666015625 , 356.1041259765625 , 411.764404296875),
(259.08447265625 , 336.46929931640625 , 302.7647705078125 , 382.87115478515625),
(408.97625732421875 , 268.484619140625 , 442.21990966796875 , 311.5849609375),
(267.28369140625 , 272.3394775390625 , 298.1092529296875 , 315.8856201171875),
(291.4217529296875 , 322.4440002441406 , 332.3624267578125 , 359.9891052246094),
(196.4033660888672 , 272.31219482421875 , 228.8103790283203 , 315.5318603515625),
(330.6380920410156 , 301.74945068359375 , 374.5095520019531 , 320.7781982421875)],[
(251.9602813720703 , 184.22024536132812 , 307.91571044921875 , 259.98980712890625),
(304.9425048828125 , 185.28424072265625 , 366.5634765625 , 266.9356689453125),
(339.3076171875 , 175.49917602539062 , 382.7147216796875 , 249.72091674804688),
(423.42388916015625 , 148.05540466308594 , 456.23272705078125 , 191.6558380126953),
(207.66175842285156 , 147.46624755859375 , 240.9794158935547 , 193.15679931640625),
(316.7447509765625 , 169.5057373046875 , 347.81658935546875 , 193.26812744140625),
(268.0220642089844 , 167.49810791015625 , 305.3833923339844 , 189.16653442382812),
(286.0023193359375 , 174.7705535888672 , 325.35888671875 , 213.3358612060547),
(280.12945556640625 , 147.594482421875 , 310.32049560546875 , 168.5084228515625),
(276.5955810546875 , 146.26986694335938 , 309.18963623046875 , 177.8402099609375)],[
(272.00860595703125 , 328.34307861328125 , 325.10125732421875 , 403.35540771484375),
(172.0113525390625 , 329.85821533203125 , 227.0106201171875 , 405.17279052734375),
(216.2852783203125 , 343.162353515625 , 276.6947021484375 , 426.0419921875),
(188.61639404296875 , 297.1422424316406 , 238.2607421875 , 346.5916442871094),
(270.9439697265625 , 301.3717041015625 , 317.75830078125 , 347.7540283203125),
(222.39578247070312 , 313.8985290527344 , 275.2531433105469 , 358.3535461425781),
(131.24441528320312 , 214.11672973632812 , 166.67926025390625 , 255.78823852539062),
(270.50701904296875 , 301.1878662109375 , 321.10015869140625 , 395.8363037109375)],[
(174.74801635742188 , 294.0775146484375 , 244.83779907226562 , 367.78289794921875),
(224.31033325195312 , 318.21673583984375 , 304.6703796386719 , 391.42901611328125),
(299.1870422363281 , 339.22552490234375 , 384.5157775878906 , 454.70916748046875),
(220.41429138183594 , 367.54083251953125 , 314.4825439453125 , 480.0),
(145.47378540039062 , 347.880615234375 , 233.97308349609375 , 463.8685302734375),
(290.3888854980469 , 299.53570556640625 , 358.7075500488281 , 373.90118408203125),
(98.04771423339844 , 189.65524291992188 , 142.82887268066406 , 242.29855346679688),
(283.23931884765625 , 191.3866424560547 , 322.1676025390625 , 243.42967224121094),
(459.7445068359375 , 193.22982788085938 , 499.78143310546875 , 242.14340209960938),
(272.7080078125 , 175.76483154296875 , 323.540283203125 , 251.825927734375),
(449.9822998046875 , 178.88450622558594 , 506.6971435546875 , 248.75828552246094)],[
(50.78877258300781 , 285.72528076171875 , 113.20205688476562 , 354.84735107421875),
(164.45309448242188 , 294.74127197265625 , 222.2520751953125 , 362.86712646484375),
(289.2242431640625 , 297.8942565917969 , 339.636474609375 , 366.2070617675781),
(537.2440185546875 , 303.1318359375 , 590.0001220703125 , 366.9354248046875),
(279.10302734375 , 226.55819702148438 , 329.6251220703125 , 293.2511901855469),
(397.43505859375 , 295.85858154296875 , 445.01123046875 , 362.61895751953125),
(162.02664184570312 , 223.13165283203125 , 210.39324951171875 , 255.6290283203125),
(281.11712646484375 , 228.62344360351562 , 328.9239501953125 , 259.06207275390625)],[
(66.41960144042969 , 270.59527587890625 , 126.72383117675781 , 339.4127197265625),
(290.324951171875 , 282.27410888671875 , 343.2933349609375 , 353.672607421875),
(419.2613525390625 , 225.18524169921875 , 472.3126220703125 , 289.17156982421875),
(278.931884765625 , 216.138916015625 , 329.7767333984375 , 284.0390625),
(547.271728515625 , 293.94561767578125 , 606.653564453125 , 362.78155517578125),
(169.01199340820312 , 215.85519409179688 , 226.03781127929688 , 277.7164001464844),
(401.33770751953125 , 283.4932861328125 , 452.2261962890625 , 353.6011962890625),
(166.10882568359375 , 147.7796630859375 , 224.66415405273438 , 221.59490966796875),
(172.58132934570312 , 279.036376953125 , 227.19979858398438 , 348.1397705078125)],[
(168.98001098632812 , 313.44830322265625 , 226.80197143554688 , 387.50750732421875),
(128.08624267578125 , 306.3509521484375 , 179.4656982421875 , 379.434814453125),
(195.50497436523438 , 294.8073425292969 , 243.39071655273438 , 360.4861145019531),
(367.508544921875 , 238.37405395507812 , 400.98822021484375 , 280.6773376464844),
(150.18878173828125 , 197.71163940429688 , 184.14886474609375 , 239.15682983398438),
(225.0250244140625 , 237.46969604492188 , 261.5126953125 , 281.6034240722656),
(161.72848510742188 , 237.29049682617188 , 195.29403686523438 , 278.7260437011719),
(221.22128295898438 , 200.44952392578125 , 259.6186828613281 , 237.84967041015625),
(150.49122619628906 , 195.9986572265625 , 190.27369689941406 , 282.62677001953125),
(220.97146606445312 , 159.4620819091797 , 256.17626953125 , 191.5512237548828)],[
(166.627685546875 , 310.4991455078125 , 225.08322143554688 , 386.18560791015625),
(126.11274719238281 , 304.0140380859375 , 178.02879333496094 , 378.36962890625),
(220.58380126953125 , 234.038330078125 , 257.5448913574219 , 277.74005126953125),
(364.4404602050781 , 232.33273315429688 , 398.1814270019531 , 275.1287536621094),
(192.85443115234375 , 291.15802001953125 , 241.02728271484375 , 355.68695068359375),
(145.66015625 , 195.51187133789062 , 179.723876953125 , 237.66171264648438),
(157.78517150878906 , 234.71572875976562 , 192.51817321777344 , 275.92681884765625),
(217.73321533203125 , 196.45538330078125 , 249.89166259765625 , 234.13833618164062),
(146.17636108398438 , 193.68707275390625 , 190.2767333984375 , 281.68359375),
(216.03286743164062 , 155.1978759765625 , 255.91635131835938 , 221.7281494140625),
(217.11712646484375 , 155.873779296875 , 251.74594116210938 , 199.97314453125)]]

# Convert each coordinate to an integer
balls = [[(int(x1), int(y1), int(x2), int(y2)) for x1, y1, x2, y2 in sublist] for sublist in balls_float]


# Initialize a list or dictionary to store results for each image
image_results = []

for img_path,balls_per_image in zip(image_paths, balls):

    img = cv2.imread(img_path)
    img = cv2.resize(img,(640,480))
    # classify_and_visualize_balls(img, balls[i])
    result = classify_and_visualize_balls(img, balls_per_image)

    image_results.append(result)

    for index, result in enumerate(image_results, start=1):
        # Access each category of balls by its key
        red_balls = result["red_ball"]
        blue_balls = result["blue_ball"]
        purple_balls = result["purple_ball"]
        
        # Print the results for the current image
        print(f"Image {index}:")
        print(f"  Red balls: {red_balls}")
        print(f"  Blue balls: {blue_balls}")
        print(f"  Purple balls: {purple_balls}")
        print()  # Just for better readability



    # Load and resize the image outside of the function
# img_path = "x.jpg"
# img = cv2.imread(img_path)
# img = cv2.resize(img, (640, 480))

# Example usage
# balls = [(47,32,301,276),(195,178,435,440),(344,34,567,284)]
# balls = [(195,270,435,440)]

#wrong
# balls = [(141,263,245,395),(171,144,268,261),(239,224,339,352),(260,107,357,226),(346,165,447,287),(323,292,423,417)]
# balls_float = [
#     (225.14065551757812, 353.8186950683594, 279.4885559082031, 433.5942687988281),
#     (275.057373046875, 359.189453125, 335.6610107421875, 442.5640869140625),
#     (245.22854614257812, 317.9010009765625, 290.0239562988281, 357.1180419921875),
#     (306.95751953125, 338.07232666015625, 356.1041259765625, 411.764404296875),
#     (259.08447265625, 336.46929931640625, 302.7647705078125, 382.87115478515625),
#     (408.97625732421875, 268.484619140625, 442.21990966796875, 311.5849609375),
#     (267.28369140625, 272.3394775390625, 298.1092529296875, 315.8856201171875),
#     (291.4217529296875, 322.4440002441406, 332.3624267578125, 359.9891052246094),
#     (196.4033660888672, 272.31219482421875, 228.8103790283203, 315.5318603515625),
#     (330.6380920410156, 301.74945068359375, 374.5095520019531, 320.7781982421875)
# ]


# balls = [(int(x1), int(y1), int(x2), int(y2)) for x1, y1, x2, y2 in balls_float]
# # Convert each coordinate to an integer

# classify_and_visualize_balls(img, balls)













"""
balls = [[(168.98953247070312 , 313.2676086425781 , 226.52139282226562 , 387.0252990722656),
(128.18849182128906 , 306.70294189453125 , 179.49961853027344 , 378.0439453125),
(195.54681396484375 , 295.2579650878906 , 243.40045166015625 , 360.0823669433594),
(367.66876220703125 , 238.42300415039062 , 400.8782958984375 , 280.3059387207031),
(152.3077392578125 , 197.715576171875 , 183.88992309570312 , 238.72088623046875),
(221.2281494140625 , 200.3909454345703 , 259.702392578125 , 237.82005310058594),
(161.65957641601562 , 237.3628692626953 , 195.16281127929688 , 278.47869873046875),
(225.75631713867188 , 237.32589721679688 , 260.40777587890625 , 280.7337951660156),
(220.49935913085938 , 158.35757446289062 , 256.11981201171875 , 205.41110229492188)],[
(166.92811584472656 , 311.0231018066406 , 225.0376739501953 , 385.5102844238281),
(364.58038330078125 , 232.32095336914062 , 397.91119384765625 , 274.7552185058594),
(126.66531372070312 , 304.42987060546875 , 177.96807861328125 , 377.3907470703125),
(193.23696899414062 , 291.04449462890625 , 241.09161376953125 , 354.914794921875),
(222.348388671875 , 234.6083984375 , 256.293701171875 , 277.09930419921875),
(146.13595581054688 , 195.56753540039062 , 179.83615112304688 , 237.62948608398438),
(157.9416961669922 , 234.54623413085938 , 192.06590270996094 , 275.8736877441406),
(218.38565063476562 , 195.73890686035156 , 249.32272338867188 , 233.7842559814453),
(217.0113525390625 , 155.86953735351562 , 251.395751953125 , 199.82357788085938),
(145.89852905273438 , 194.48220825195312 , 182.57009887695312 , 279.28582763671875)],[
(139.20596313476562 , 268.62554931640625 , 239.16543579101562 , 399.55511474609375),
(246.72581481933594 , 236.2895965576172 , 323.44287109375 , 355.25469970703125),
(171.98690795898438 , 140.68359375 , 260.65777587890625 , 256.0562744140625),
(385.93133544921875 , 164.69451904296875 , 446.34832763671875 , 279.4814453125),
(270.26458740234375 , 101.07904052734375 , 351.65887451171875 , 190.68386840820312)],[
(225.14065551757812 , 353.8186950683594 , 279.4885559082031 , 433.5942687988281),
(275.057373046875 , 359.189453125 , 335.6610107421875 , 442.5640869140625),
(245.22854614257812 , 317.9010009765625 , 290.0239562988281 , 357.1180419921875),
(306.95751953125 , 338.07232666015625 , 356.1041259765625 , 411.764404296875),
(259.08447265625 , 336.46929931640625 , 302.7647705078125 , 382.87115478515625),
(408.97625732421875 , 268.484619140625 , 442.21990966796875 , 311.5849609375),
(267.28369140625 , 272.3394775390625 , 298.1092529296875 , 315.8856201171875),
(291.4217529296875 , 322.4440002441406 , 332.3624267578125 , 359.9891052246094),
(196.4033660888672 , 272.31219482421875 , 228.8103790283203 , 315.5318603515625),
(330.6380920410156 , 301.74945068359375 , 374.5095520019531 , 320.7781982421875)],[
(251.9602813720703 , 184.22024536132812 , 307.91571044921875 , 259.98980712890625),
(304.9425048828125 , 185.28424072265625 , 366.5634765625 , 266.9356689453125),
(339.3076171875 , 175.49917602539062 , 382.7147216796875 , 249.72091674804688),
(423.42388916015625 , 148.05540466308594 , 456.23272705078125 , 191.6558380126953),
(207.66175842285156 , 147.46624755859375 , 240.9794158935547 , 193.15679931640625),
(316.7447509765625 , 169.5057373046875 , 347.81658935546875 , 193.26812744140625),
(268.0220642089844 , 167.49810791015625 , 305.3833923339844 , 189.16653442382812),
(286.0023193359375 , 174.7705535888672 , 325.35888671875 , 213.3358612060547),
(280.12945556640625 , 147.594482421875 , 310.32049560546875 , 168.5084228515625),
(276.5955810546875 , 146.26986694335938 , 309.18963623046875 , 177.8402099609375)],[
(272.00860595703125 , 328.34307861328125 , 325.10125732421875 , 403.35540771484375),
(172.0113525390625 , 329.85821533203125 , 227.0106201171875 , 405.17279052734375),
(216.2852783203125 , 343.162353515625 , 276.6947021484375 , 426.0419921875),
(188.61639404296875 , 297.1422424316406 , 238.2607421875 , 346.5916442871094),
(270.9439697265625 , 301.3717041015625 , 317.75830078125 , 347.7540283203125),
(222.39578247070312 , 313.8985290527344 , 275.2531433105469 , 358.3535461425781),
(131.24441528320312 , 214.11672973632812 , 166.67926025390625 , 255.78823852539062),
(270.50701904296875 , 301.1878662109375 , 321.10015869140625 , 395.8363037109375)],[
(174.74801635742188 , 294.0775146484375 , 244.83779907226562 , 367.78289794921875),
(224.31033325195312 , 318.21673583984375 , 304.6703796386719 , 391.42901611328125),
(299.1870422363281 , 339.22552490234375 , 384.5157775878906 , 454.70916748046875),
(220.41429138183594 , 367.54083251953125 , 314.4825439453125 , 480.0),
(145.47378540039062 , 347.880615234375 , 233.97308349609375 , 463.8685302734375),
(290.3888854980469 , 299.53570556640625 , 358.7075500488281 , 373.90118408203125),
(98.04771423339844 , 189.65524291992188 , 142.82887268066406 , 242.29855346679688),
(283.23931884765625 , 191.3866424560547 , 322.1676025390625 , 243.42967224121094),
(459.7445068359375 , 193.22982788085938 , 499.78143310546875 , 242.14340209960938),
(272.7080078125 , 175.76483154296875 , 323.540283203125 , 251.825927734375),
(449.9822998046875 , 178.88450622558594 , 506.6971435546875 , 248.75828552246094)],[
(50.78877258300781 , 285.72528076171875 , 113.20205688476562 , 354.84735107421875),
(164.45309448242188 , 294.74127197265625 , 222.2520751953125 , 362.86712646484375),
(289.2242431640625 , 297.8942565917969 , 339.636474609375 , 366.2070617675781),
(537.2440185546875 , 303.1318359375 , 590.0001220703125 , 366.9354248046875),
(279.10302734375 , 226.55819702148438 , 329.6251220703125 , 293.2511901855469),
(397.43505859375 , 295.85858154296875 , 445.01123046875 , 362.61895751953125),
(162.02664184570312 , 223.13165283203125 , 210.39324951171875 , 255.6290283203125),
(281.11712646484375 , 228.62344360351562 , 328.9239501953125 , 259.06207275390625)],[
(66.41960144042969 , 270.59527587890625 , 126.72383117675781 , 339.4127197265625),
(290.324951171875 , 282.27410888671875 , 343.2933349609375 , 353.672607421875),
(419.2613525390625 , 225.18524169921875 , 472.3126220703125 , 289.17156982421875),
(278.931884765625 , 216.138916015625 , 329.7767333984375 , 284.0390625),
(547.271728515625 , 293.94561767578125 , 606.653564453125 , 362.78155517578125),
(169.01199340820312 , 215.85519409179688 , 226.03781127929688 , 277.7164001464844),
(401.33770751953125 , 283.4932861328125 , 452.2261962890625 , 353.6011962890625),
(166.10882568359375 , 147.7796630859375 , 224.66415405273438 , 221.59490966796875),
(172.58132934570312 , 279.036376953125 , 227.19979858398438 , 348.1397705078125)],[
(168.98001098632812 , 313.44830322265625 , 226.80197143554688 , 387.50750732421875),
(128.08624267578125 , 306.3509521484375 , 179.4656982421875 , 379.434814453125),
(195.50497436523438 , 294.8073425292969 , 243.39071655273438 , 360.4861145019531),
(367.508544921875 , 238.37405395507812 , 400.98822021484375 , 280.6773376464844),
(150.18878173828125 , 197.71163940429688 , 184.14886474609375 , 239.15682983398438),
(225.0250244140625 , 237.46969604492188 , 261.5126953125 , 281.6034240722656),
(161.72848510742188 , 237.29049682617188 , 195.29403686523438 , 278.7260437011719),
(221.22128295898438 , 200.44952392578125 , 259.6186828613281 , 237.84967041015625),
(150.49122619628906 , 195.9986572265625 , 190.27369689941406 , 282.62677001953125),
(220.97146606445312 , 159.4620819091797 , 256.17626953125 , 191.5512237548828)],[
(166.627685546875 , 310.4991455078125 , 225.08322143554688 , 386.18560791015625),
(126.11274719238281 , 304.0140380859375 , 178.02879333496094 , 378.36962890625),
(220.58380126953125 , 234.038330078125 , 257.5448913574219 , 277.74005126953125),
(364.4404602050781 , 232.33273315429688 , 398.1814270019531 , 275.1287536621094),
(192.85443115234375 , 291.15802001953125 , 241.02728271484375 , 355.68695068359375),
(145.66015625 , 195.51187133789062 , 179.723876953125 , 237.66171264648438),
(157.78517150878906 , 234.71572875976562 , 192.51817321777344 , 275.92681884765625),
(217.73321533203125 , 196.45538330078125 , 249.89166259765625 , 234.13833618164062),
(146.17636108398438 , 193.68707275390625 , 190.2767333984375 , 281.68359375),
(216.03286743164062 , 155.1978759765625 , 255.91635131835938 , 221.7281494140625),
(217.11712646484375 , 155.873779296875 , 251.74594116210938 , 199.97314453125)]]
"""